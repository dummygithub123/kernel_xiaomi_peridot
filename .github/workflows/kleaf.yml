name: Build Kernel with Kleaf

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install minimal deps
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip zip python3 git build-essential \
            gcc g++ make pkg-config zlib1g-dev openjdk-11-jdk

      - name: Install Bazelisk (no sudo writes to /usr/local)
        run: |
          mkdir -p "$HOME/bin"
          curl -L https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64 -o "$HOME/bin/bazel"
          chmod +x "$HOME/bin/bazel"
          echo "$HOME/bin" >> "$GITHUB_PATH"
          bazel --version

      - name: Clone Kleaf infra (AOSP kernel/build) and ensure package
        run: |
          set -eux
          mkdir -p build/kernel
          # clone (ignore failure if network glitch)
          git clone --depth=1 https://android.googlesource.com/kernel/build build/kernel/build || true

          # choose target kleaf dir: prefer build/kernel/build/kleaf if cloned, else fallback
          if [ -d build/kernel/build/kleaf ]; then
            TARGET_DIR="build/kernel/build/kleaf"
          else
            TARGET_DIR="build/kernel/kleaf"
            mkdir -p "$TARGET_DIR"
          fi

          # ensure BUILD.bazel present and valid so Bazel treats it as package
          if [ ! -f "$TARGET_DIR/BUILD.bazel" ]; then
            printf 'package(default_visibility = ["//visibility:public"])\\n\\nexports_files([\"kernel.bzl\"])\\n\\nexports_files(glob([\"**/*.bzl\"]))\\n' > "$TARGET_DIR/BUILD.bazel"
          fi

      - name: Ensure MODULE.bazel exists (for bzlmod)
        run: |
          set -eux
          if [ ! -f MODULE.bazel ]; then
            printf 'module(\\n' > MODULE.bazel
            printf '    name = \"kernel_xiaomi_peridot\",\\n' >> MODULE.bazel
            printf '    version = \"1.0\",\\n' >> MODULE.bazel
            printf ')\\n\\n' >> MODULE.bazel
            printf 'bazel_dep(name = \"bazel_skylib\", version = \"1.4.2\")\\n' >> MODULE.bazel
            printf 'bazel_dep(name = \"rules_cc\", version = \"0.0.8\")\\n' >> MODULE.bazel
          fi
          echo "=== MODULE.bazel ==="
          cat MODULE.bazel

      - name: Try build kernel (peridot targets fallback)
        run: |
          set -eux
          # try common peridot targets (adjust if your repo has different names)
          if bazel build //:peridot_dist --verbose_failures; then
            echo "Built //:peridot_dist"
          elif bazel build //:allmods_peridot --verbose_failures; then
            echo "Built //:allmods_peridot"
          elif bazel build //:kernel --verbose_failures; then
            echo "Built //:kernel"
          else
            echo "No known target built; run 'bazel query //...' locally to list targets"
            exit 1
          fi

      - name: List bazel-bin and upload artifacts
        run: |
          echo "=== bazel-bin contents ==="
          ls -lah bazel-bin || true
        # upload artifact step below
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: bazel-bin/**
