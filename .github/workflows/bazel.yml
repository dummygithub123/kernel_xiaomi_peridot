name: Build Xiaomi Peridot Kernel (boot.img, Proton Clang)

on: workflow_dispatch: inputs: defconfig: description: "Kernel defconfig" required: true default: "peridot_defconfig" compress: description: "Compress Image (gzip/none)" required: true default: "gzip" lto: description: "Enable LTO (thin/full/none)" required: true default: "thin" os_version: description: "Android OS version (A.B.C)" required: true default: "14.0.0" os_patch_level: description: "Android patch level (YYYY-MM)" required: true default: "2025-08"

jobs: build: runs-on: ubuntu-22.04 env: ARCH: arm64 SUBARCH: arm64 CLANG_DIR: ${{ github.workspace }}/toolchains/clang KBUILD_BUILD_USER: gha KBUILD_BUILD_HOST: runner

steps:
  - name: Checkout kernel source
    uses: actions/checkout@v4
    with:
      path: kernel

  - name: Install dependencies
    run: |
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends \
        bc bison build-essential ccache clang curl flex \
        git libelf-dev libssl-dev lld llvm lz4 \
        python3 rsync tar cpio unzip wget xz-utils \
        libncurses5-dev dwarves

  - name: Download toolchain (Proton Clang)
    run: |
      mkdir -p toolchains && cd toolchains
      git clone --depth=1 https://github.com/kdrag0n/proton-clang.git clang

  - name: Configure kernel
    working-directory: kernel
    run: |
      set -euxo pipefail
      export PATH="${CLANG_DIR}/bin:${PATH}"
      export CC=clang
      export LD=ld.lld
      export LLVM=1
      export LLVM_IAS=1
      export CLANG_TRIPLE=aarch64-linux-gnu-
      export CROSS_COMPILE=aarch64-linux-gnu-
      export CROSS_COMPILE_ARM32=arm-linux-gnueabi-

      mkdir -p out
      make O=out ${{ inputs.defconfig }}

      if [ -f scripts/config ]; then
        case "${{ inputs.lto }}" in
          thin) scripts/config --file out/.config -e LTO_CLANG -e LTO_CLANG_THIN -d LTO_NONE ;;
          full) scripts/config --file out/.config -e LTO_CLANG -e LTO_CLANG_FULL -d LTO_NONE ;;
          none) scripts/config --file out/.config -d LTO_CLANG -d LTO_CLANG_THIN -d LTO_CLANG_FULL -e LTO_NONE ;;
        esac
      else
        echo "scripts/config not found; skipping LTO config tweak"
      fi

      yes "" | make O=out olddefconfig

  - name: Build kernel (Image & modules)
    working-directory: kernel
    run: |
      set -euxo pipefail
      export PATH="${CLANG_DIR}/bin:${PATH}"
      export CC=clang
      export LD=ld.lld
      export LLVM=1
      export LLVM_IAS=1
      export CLANG_TRIPLE=aarch64-linux-gnu-
      export CROSS_COMPILE=aarch64-linux-gnu-
      export CROSS_COMPILE_ARM32=arm-linux-gnueabi-

      make -j"$(nproc)" O=out

      if [ "${{ inputs.compress }}" = "gzip" ]; then
        gzip -c out/arch/arm64/boot/Image > out/arch/arm64/boot/Image.gz
      fi

  - name: Prepare mkbootimg
    run: |
      git clone --depth=1 https://android.googlesource.com/platform/system/tools/mkbootimg mkbootimg

  - name: Create dummy ramdisk (placeholder)
    run: |
      set -euxo pipefail
      mkdir -p obj/ramdisk_root
      cat > obj/ramdisk_root/init <<'EOF'
      #!/system/bin/sh
      echo "Dummy ramdisk for boot.img packing"
      exec /init
      EOF
      chmod +x obj/ramdisk_root/init
      (cd obj/ramdisk_root && find . | cpio -H newc -o) > obj/ramdisk.cpio
      gzip -c obj/ramdisk.cpio > obj/ramdisk.cpio.gz

  - name: Pack boot.img (boot header v4)
    run: |
      set -euxo pipefail
      if [ "${{ inputs.compress }}" = "gzip" ]; then
        KERNEL_PATH="kernel/out/arch/arm64/boot/Image.gz"
      else
        KERNEL_PATH="kernel/out/arch/arm64/boot/Image"
      fi
      RAMDISK_PATH="obj/ramdisk.cpio.gz"
      mkdir -p out/boot

      python3 mkbootimg/mkbootimg.py \
        --kernel "$KERNEL_PATH" \
        --ramdisk "$RAMDISK_PATH" \
        --header_version 4 \
        --os_version "${{ inputs.os_version }}" \
        --os_patch_level "${{ inputs.os_patch_level }}" \
        --cmdline "console=tty0 console=ttyS0,115200n8 earlycon=uart8250,mmio32,0x09000000 androidboot.hardware=peridot" \
        --output out/boot/boot.img

  - name: Summarize outputs
    run: |
      set -euxo pipefail
      ls -lah kernel/out/arch/arm64/boot || true
      ls -lah out/boot || true

  - name: Upload artifacts
    uses: actions/upload-artifact@v4
    with:
      name: peridot-bootimg-proton-${{ github.run_number }}
      path: |
        kernel/out/arch/arm64/boot/Image*
        out/boot/boot.img
      if-no-files-found: warn

